{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MPC documentation MPC is an online store for catering and cleaning supplies in Melbourne. The purpose of the website is to serve businesses owner with products browsing, customing and ordering.","title":"Home"},{"location":"#mpc-documentation","text":"MPC is an online store for catering and cleaning supplies in Melbourne. The purpose of the website is to serve businesses owner with products browsing, customing and ordering.","title":"MPC documentation"},{"location":"coding/","text":"Frontend Technical Documentation The web application can be mainly be divided into two sides: frontend or also known as client-side application, an application that runs inside the browser of the user, backend or also known as server-side application, an application that is connected with a database and provides apis for frontend in order to retrieve data or post data to. This documentation only contains information for frontend as this is made by frontend developer. Frontend Pages All pages for the website can be found under /pages folder. As Nextjs is a dynamic framework, all page url will be named automatically based on the folder name or the Js filename. Other page components such as Navbar or layout can be found under /components folder. These components are used by the files in /pages State All state information such as userId, cart, etc. are stored in the localStorage. The store.js file under src folder stores all state's information as well as the logic to update state. Component styling This website is using material-ui v4. See docs . Please note that changing to mui-v5 might cause some styling error as Nextjs prerenders all pages in default in advance instead of doing all in the client side, that is why the style components get conflicted if using mui v5. At the moment, this issue is not fixed yet, therefore, mui v4 was used instead.","title":"Frontend Documentation"},{"location":"coding/#frontend-technical-documentation","text":"The web application can be mainly be divided into two sides: frontend or also known as client-side application, an application that runs inside the browser of the user, backend or also known as server-side application, an application that is connected with a database and provides apis for frontend in order to retrieve data or post data to. This documentation only contains information for frontend as this is made by frontend developer.","title":"Frontend Technical Documentation"},{"location":"coding/#frontend-pages","text":"All pages for the website can be found under /pages folder. As Nextjs is a dynamic framework, all page url will be named automatically based on the folder name or the Js filename. Other page components such as Navbar or layout can be found under /components folder. These components are used by the files in /pages","title":"Frontend Pages"},{"location":"coding/#state","text":"All state information such as userId, cart, etc. are stored in the localStorage. The store.js file under src folder stores all state's information as well as the logic to update state.","title":"State"},{"location":"coding/#component-styling","text":"This website is using material-ui v4. See docs . Please note that changing to mui-v5 might cause some styling error as Nextjs prerenders all pages in default in advance instead of doing all in the client side, that is why the style components get conflicted if using mui v5. At the moment, this issue is not fixed yet, therefore, mui v4 was used instead.","title":"Component styling"},{"location":"deployment/","text":"Deployment Currently the website is deployed as a test version on Netlify. Note If you want to redeploy the website on Netlify, please note that Netlify treats all warnings as errors, and the website has some warnings at the moment. Therefore, you need to change CI value to false in Deployment Settings. See documentation .","title":"Deployment"},{"location":"deployment/#deployment","text":"Currently the website is deployed as a test version on Netlify.","title":"Deployment"},{"location":"deployment/#note","text":"If you want to redeploy the website on Netlify, please note that Netlify treats all warnings as errors, and the website has some warnings at the moment. Therefore, you need to change CI value to false in Deployment Settings. See documentation .","title":"Note"},{"location":"overview/","text":"Technical Documentation for Developer Application The website is built with Nextjs. Nextjs is a flexible React framework that allows you to build blocks to help creating faster web applications. Another reason to choose Nextjs is that it is an exceptional choice for SEO rankings and creating dynamic web pages. Inside the app, state's information such as cart, userId, etc. are stored in Contexts, so those information can be passed down to other components when necessary. Reducers are also used to consolidate the state's update logic. State will be stored in localStorage, so whenever user refresh the page, state information will not be lost. Development Workflow Dependencies Run the following command to install all dependencies on your working environment. npm install # or yarn install If you encounter any error regarding to error dependency tree, please try the following command instead. npm/yarn install --legacy-peer-deps # or npm/yarn install --force Run the development server Run the following command next dev This command will run the application on development server. This is suitable when you are making changes and want to see it applied before deployment. Open http://localhost:3000 with your browser to see the result. Learn More To learn more about Next.js, take a look at the following resources: Next.js Documentation - learn about Next.js features and API. Learn Next.js - an interactive Next.js tutorial.","title":"Overview"},{"location":"overview/#technical-documentation-for-developer","text":"","title":"Technical Documentation for Developer"},{"location":"overview/#application","text":"The website is built with Nextjs. Nextjs is a flexible React framework that allows you to build blocks to help creating faster web applications. Another reason to choose Nextjs is that it is an exceptional choice for SEO rankings and creating dynamic web pages. Inside the app, state's information such as cart, userId, etc. are stored in Contexts, so those information can be passed down to other components when necessary. Reducers are also used to consolidate the state's update logic. State will be stored in localStorage, so whenever user refresh the page, state information will not be lost.","title":"Application"},{"location":"overview/#development-workflow","text":"","title":"Development Workflow"},{"location":"overview/#dependencies","text":"Run the following command to install all dependencies on your working environment. npm install # or yarn install If you encounter any error regarding to error dependency tree, please try the following command instead. npm/yarn install --legacy-peer-deps # or npm/yarn install --force","title":"Dependencies"},{"location":"overview/#run-the-development-server","text":"Run the following command next dev This command will run the application on development server. This is suitable when you are making changes and want to see it applied before deployment. Open http://localhost:3000 with your browser to see the result.","title":"Run the development server"},{"location":"overview/#learn-more","text":"To learn more about Next.js, take a look at the following resources: Next.js Documentation - learn about Next.js features and API. Learn Next.js - an interactive Next.js tutorial.","title":"Learn More"},{"location":"patterns/","text":"Coding Patterns Casing This codebase will be using camel casing Linters / Formatters This will automatically format your code if you install ESLint in VS Code or type yarn lint in the specific folders. Make sure you have installed the devDependencies so additional linters can be used.","title":"Coding Patterns"},{"location":"patterns/#coding-patterns","text":"","title":"Coding Patterns"},{"location":"patterns/#casing","text":"This codebase will be using camel casing","title":"Casing"},{"location":"patterns/#linters-formatters","text":"This will automatically format your code if you install ESLint in VS Code or type yarn lint in the specific folders. Make sure you have installed the devDependencies so additional linters can be used.","title":"Linters / Formatters"},{"location":"user/","text":"User Documentation Login System The site requires customers/admins to login before being able to view or make any changes with products. User will need to have an account to gain certain permissions to the website, or can register for one if they don't have Store Switch After login, user will be able to see their registered store, and able to navigate between store to see different products customised for each of their store. My Products My products page shows all products that user had added to their current store. My products page will be different depend on with current store they are choosing In this page, user can add whichever products they want to the basket. The added products will be applied for the current store they are choosing. After adding product to basket, the product will be in the basket. User can open their current shopping basket by clicking the shopping bag icon on the top right of their screen. A cart drawer will appear and show all products added. User can change quantity or proceed to checkout from here. Click 'Confirm Order' in order to proceed to the checkout page. Edit Products Users can edit product name in order to serve their own customisation purposes. To do so, click on the Edit button, after that, change the product name to whatever prefered, then click the green button to save edit. Contact User can find extra information about the store under 'About Us' or 'Contact Us' tab through the navigation bar","title":"User Guide"},{"location":"user/#user-documentation","text":"","title":"User Documentation"},{"location":"user/#login-system","text":"The site requires customers/admins to login before being able to view or make any changes with products. User will need to have an account to gain certain permissions to the website, or can register for one if they don't have","title":"Login System"},{"location":"user/#store-switch","text":"After login, user will be able to see their registered store, and able to navigate between store to see different products customised for each of their store.","title":"Store Switch"},{"location":"user/#my-products","text":"My products page shows all products that user had added to their current store. My products page will be different depend on with current store they are choosing In this page, user can add whichever products they want to the basket. The added products will be applied for the current store they are choosing. After adding product to basket, the product will be in the basket. User can open their current shopping basket by clicking the shopping bag icon on the top right of their screen. A cart drawer will appear and show all products added. User can change quantity or proceed to checkout from here. Click 'Confirm Order' in order to proceed to the checkout page.","title":"My Products"},{"location":"user/#edit-products","text":"Users can edit product name in order to serve their own customisation purposes. To do so, click on the Edit button, after that, change the product name to whatever prefered, then click the green button to save edit.","title":"Edit Products"},{"location":"user/#contact","text":"User can find extra information about the store under 'About Us' or 'Contact Us' tab through the navigation bar","title":"Contact"}]}